var config    = require(process.env.BOOKSHELF_TEST)['mysql'];

var Promise   = require('bluebird');
var Sequelize = require('sequelize');
var sys       = require('sys');
var sequelize = new Sequelize(config.database, config.user, config.password, {logging: false, host: config.host});
var bookshelf = require('../../bookshelf')(require('knex')({client: 'mysql', connection: config}));

var Person = sequelize.define('person', { item: Sequelize.INTEGER, age: Sequelize.STRING, place: Sequelize.STRING, name: Sequelize.STRING });
var Person2 = bookshelf.Model.extend({
  hasTimestamps: ['createdAt', 'updatedAt'],
  tableName: 'people'
});

var knex = bookshelf.knex;

knex.schema.hasTable('people').tap(function(exists) {
  if (!exists) return bookshelf.knex.schema.createTable('people', function(t) {
    t.increments();
    t.string('name');
    t.string('age');
    t.integer('item').defaultTo(10);
    t.string('place');
    t.timestamps();
  });
}).tap(function() {
  return knex.table('people').truncate();
}).then(function() {
  return new Promise(function(resolver, rejecter) {
    Person.sync({force: true}).on('success', function() {
      var start
        , count = 10000
        , done  = 0

      var createPerson = function() {
        Person.create({name: 'someone', age: 20, place: 'sesame street'}).on('success', function() {
          if(++done == count) {
            var duration = (Date.now() - start)
            console.log("\nFinished creation of " + count + " people. Took: " + duration + "ms (avg: " + (duration/count) + "ms)")

            start = Date.now()
            console.log("Will now read them from the database:")

            Person.findAll().on('success', function(people) {
              console.log("Reading " + people.length + " items took: " + (Date.now() - start) + "ms")
              resolver();
            })
          } else {
            if (done === 1) start = Date.now();
            (done % 100 == 0) && sys.print('.')
          }
        }).on('failure', function(err) {
          console.log(err)
        })
      }

      console.log('Creating people :)')
      for(var i = 0; i < count; i++) {
        createPerson()
      }

    }).on('failure', function(err) {
      console.log(err)
    })
  });
}).tap(function() {
  return knex.table('people').truncate();
}).then(function() {

  var start
    , count = 10000
    , done  = 0;

  return Promise.map(new Array(count), function() {
    return Person2.forge({name: 'someone', age: 20, place: 'sesame street'}).save().tap(function() {
      done++
      if (done === 1) start = Date.now();
      (done % 100 == 0) && sys.print('.')
    });
  }).then(function() {
    var duration = (Date.now() - start)
    console.log("\nFinished creation of " + count + " people. Took: " + duration + "ms (avg: " + (duration/count) + "ms)")
    start = Date.now()
    console.log("Will now read them from the database:")
  }).then(function() {
    return Person2.fetchAll();
  }).then(function(people) {
    console.log("Reading " + people.length + " items took: " + (Date.now() - start) + "ms")
  });

}).then(function() {
  process.exit();
});